{"version":3,"sources":["types/FilterByCompleted.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterByCompleted","TodoList","memo","todos","titleFilter","completedFilter","onTodoSelect","selectedTodo","filteredTodos","useMemo","filteredByTitle","filter","todo","title","trim","toLowerCase","includes","length","Active","completed","Completed","filterTodos","className","map","id","type","onClick","TodoFilter","onTitleFilterChange","onCompletedFilterChange","onSubmit","e","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onModalClose","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","finally","href","email","name","App","setTodos","setTitleFilter","All","setCompletedFilter","setSelectedTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28c366ed.chunk.js","sourcesContent":["export enum FilterByCompleted {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { memo, useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { FilterByCompleted } from '../../types/FilterByCompleted';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  titleFilter: string,\n  completedFilter: FilterByCompleted,\n  onTodoSelect: (selectedTodo: Todo) => void,\n};\n\nfunction filterTodos(\n  todos: Todo[],\n  titleFilter: string,\n  completedFilter: FilterByCompleted,\n) {\n  const filteredByTitle = todos\n    .filter(todo => todo.title.trim().toLowerCase()\n      .includes(titleFilter.trim().toLowerCase()));\n\n  if (filteredByTitle.length === 0) {\n    return filteredByTitle;\n  }\n\n  switch (completedFilter) {\n    case FilterByCompleted.Active:\n      return filteredByTitle.filter(todo => !todo.completed);\n    case FilterByCompleted.Completed:\n      return filteredByTitle.filter(todo => todo.completed);\n    default:\n      return filteredByTitle;\n  }\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  titleFilter,\n  completedFilter,\n  onTodoSelect,\n  selectedTodo,\n}) => {\n  const filteredTodos = useMemo(\n    () => filterTodos(todos, titleFilter, completedFilter),\n    [todos, titleFilter, completedFilter],\n  );\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={todo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onTodoSelect(todo)}\n              >\n                {selectedTodo?.id !== todo.id ? (\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                ) : (\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import { memo } from 'react';\nimport { FilterByCompleted } from '../../types/FilterByCompleted';\n\ntype Props = {\n  titleFilter: string,\n  onTitleFilterChange: (newTitle: string) => void,\n  completedFilter: FilterByCompleted,\n  onCompletedFilterChange: (newValue: FilterByCompleted) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  titleFilter,\n  onTitleFilterChange,\n  completedFilter,\n  onCompletedFilterChange,\n}) => (\n  <form className=\"field has-addons\" onSubmit={e => e.preventDefault()}>\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={completedFilter}\n          onChange={\n            e => onCompletedFilterChange(e.target.value as FilterByCompleted)\n          }\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={titleFilter}\n        onChange={(e) => onTitleFilterChange(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {titleFilter.trim()\n          && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onTitleFilterChange('')}\n            />\n          )}\n      </span>\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  onModalClose: (emptyTodo: null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = memo(({\n  selectedTodo,\n  onModalClose,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onModalClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={user?.email}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\nimport { FilterByCompleted } from './types/FilterByCompleted';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [titleFilter, setTitleFilter] = useState('');\n  const [completedFilter, setCompletedFilter] = useState<FilterByCompleted>(FilterByCompleted.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                titleFilter={titleFilter}\n                onTitleFilterChange={setTitleFilter}\n                completedFilter={completedFilter}\n                onCompletedFilterChange={setCompletedFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={todos}\n                  titleFilter={titleFilter}\n                  completedFilter={completedFilter}\n                  onTodoSelect={setSelectedTodo}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal selectedTodo={selectedTodo} onModalClose={setSelectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}